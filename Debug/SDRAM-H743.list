
SDRAM-H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003290  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000058  24000010  08003560  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000068  08003560  00020068  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b7ec  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b31  00000000  00000000  0002b82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000008f8  00000000  00000000  0002d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000810  00000000  00000000  0002dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000355a7  00000000  00000000  0002e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b563  00000000  00000000  00063a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015238f  00000000  00000000  0006ef72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c1301  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000022b4  00000000  00000000  001c1354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003510 	.word	0x08003510

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003510 	.word	0x08003510

080002d8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	; 0x30
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80002de:	f107 0314 	add.w	r3, r7, #20
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]
 80002ee:	615a      	str	r2, [r3, #20]
 80002f0:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80002f2:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <MX_FMC_Init+0x10c>)
 80002f4:	4a3c      	ldr	r2, [pc, #240]	; (80003e8 <MX_FMC_Init+0x110>)
 80002f6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80002f8:	4b3a      	ldr	r3, [pc, #232]	; (80003e4 <MX_FMC_Init+0x10c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80002fe:	4b39      	ldr	r3, [pc, #228]	; (80003e4 <MX_FMC_Init+0x10c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000304:	4b37      	ldr	r3, [pc, #220]	; (80003e4 <MX_FMC_Init+0x10c>)
 8000306:	2204      	movs	r2, #4
 8000308:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800030a:	4b36      	ldr	r3, [pc, #216]	; (80003e4 <MX_FMC_Init+0x10c>)
 800030c:	2210      	movs	r2, #16
 800030e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000310:	4b34      	ldr	r3, [pc, #208]	; (80003e4 <MX_FMC_Init+0x10c>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000316:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <MX_FMC_Init+0x10c>)
 8000318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800031c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800031e:	4b31      	ldr	r3, [pc, #196]	; (80003e4 <MX_FMC_Init+0x10c>)
 8000320:	2200      	movs	r2, #0
 8000322:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000324:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <MX_FMC_Init+0x10c>)
 8000326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800032a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800032c:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <MX_FMC_Init+0x10c>)
 800032e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000332:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000334:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <MX_FMC_Init+0x10c>)
 8000336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800033a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800033c:	2302      	movs	r3, #2
 800033e:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000340:	2307      	movs	r3, #7
 8000342:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 8000344:	2306      	movs	r3, #6
 8000346:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000348:	2306      	movs	r3, #6
 800034a:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 4;
 800034c:	2304      	movs	r3, #4
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000350:	2302      	movs	r3, #2
 8000352:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000354:	2302      	movs	r3, #2
 8000356:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000358:	f107 0314 	add.w	r3, r7, #20
 800035c:	4619      	mov	r1, r3
 800035e:	4821      	ldr	r0, [pc, #132]	; (80003e4 <MX_FMC_Init+0x10c>)
 8000360:	f002 ff0e 	bl	8003180 <HAL_SDRAM_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 800036a:	f000 fa75 	bl	8000858 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 800036e:	2301      	movs	r3, #1
 8000370:	607b      	str	r3, [r7, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1; /* configure the Target Bank bits */
 8000372:	2310      	movs	r3, #16
 8000374:	60bb      	str	r3, [r7, #8]
  Command.AutoRefreshNumber      = 1;
 8000376:	2301      	movs	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
  Command.ModeRegisterDefinition = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000384:	4619      	mov	r1, r3
 8000386:	4817      	ldr	r0, [pc, #92]	; (80003e4 <MX_FMC_Init+0x10c>)
 8000388:	f002 ff36 	bl	80031f8 <HAL_SDRAM_SendCommand>
  /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
  HAL_Delay(1);
 800038c:	2001      	movs	r0, #1
 800038e:	f000 fbf1 	bl	8000b74 <HAL_Delay>
  /* Step 5: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000392:	2302      	movs	r3, #2
 8000394:	607b      	str	r3, [r7, #4]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	f640 72ff 	movw	r2, #4095	; 0xfff
 800039c:	4619      	mov	r1, r3
 800039e:	4811      	ldr	r0, [pc, #68]	; (80003e4 <MX_FMC_Init+0x10c>)
 80003a0:	f002 ff2a 	bl	80031f8 <HAL_SDRAM_SendCommand>
  /* Step 6: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 80003a4:	2303      	movs	r3, #3
 80003a6:	607b      	str	r3, [r7, #4]
  Command.AutoRefreshNumber      = 2;
 80003a8:	2302      	movs	r3, #2
 80003aa:	60fb      	str	r3, [r7, #12]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	f640 72ff 	movw	r2, #4095	; 0xfff
 80003b2:	4619      	mov	r1, r3
 80003b4:	480b      	ldr	r0, [pc, #44]	; (80003e4 <MX_FMC_Init+0x10c>)
 80003b6:	f002 ff1f 	bl	80031f8 <HAL_SDRAM_SendCommand>
  /* Step 7: Program the external memory mode register */
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 80003ba:	2304      	movs	r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
  Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 80003be:	f44f 7308 	mov.w	r3, #544	; 0x220
 80003c2:	613b      	str	r3, [r7, #16]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xfff);
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80003ca:	4619      	mov	r1, r3
 80003cc:	4805      	ldr	r0, [pc, #20]	; (80003e4 <MX_FMC_Init+0x10c>)
 80003ce:	f002 ff13 	bl	80031f8 <HAL_SDRAM_SendCommand>
  /* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
  /* Set the device refresh rate
   * COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
           = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
   HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1542);
 80003d2:	f240 6106 	movw	r1, #1542	; 0x606
 80003d6:	4803      	ldr	r0, [pc, #12]	; (80003e4 <MX_FMC_Init+0x10c>)
 80003d8:	f002 ff43 	bl	8003262 <HAL_SDRAM_ProgramRefreshRate>

  /* USER CODE END FMC_Init 2 */
}
 80003dc:	bf00      	nop
 80003de:	3730      	adds	r7, #48	; 0x30
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2400002c 	.word	0x2400002c
 80003e8:	52004140 	.word	0x52004140

080003ec <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b0b6      	sub	sp, #216	; 0xd8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000402:	4b61      	ldr	r3, [pc, #388]	; (8000588 <HAL_FMC_MspInit+0x19c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 80b9 	bne.w	800057e <HAL_FMC_MspInit+0x192>
    return;
  }
  FMC_Initialized = 1;
 800040c:	4b5e      	ldr	r3, [pc, #376]	; (8000588 <HAL_FMC_MspInit+0x19c>)
 800040e:	2201      	movs	r2, #1
 8000410:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	22bc      	movs	r2, #188	; 0xbc
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f003 f870 	bl	8003500 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000424:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000426:	2310      	movs	r3, #16
 8000428:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 133;
 800042a:	2385      	movs	r3, #133	; 0x85
 800042c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800042e:	2302      	movs	r3, #2
 8000430:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000432:	2302      	movs	r3, #2
 8000434:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000436:	2302      	movs	r3, #2
 8000438:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800043e:	2300      	movs	r3, #0
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000442:	2302      	movs	r3, #2
 8000444:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fdee 	bl	800202c <HAL_RCCEx_PeriphCLKConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <HAL_FMC_MspInit+0x6e>
    {
      Error_Handler();
 8000456:	f000 f9ff 	bl	8000858 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800045a:	4b4c      	ldr	r3, [pc, #304]	; (800058c <HAL_FMC_MspInit+0x1a0>)
 800045c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000460:	4a4a      	ldr	r2, [pc, #296]	; (800058c <HAL_FMC_MspInit+0x1a0>)
 8000462:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000466:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800046a:	4b48      	ldr	r3, [pc, #288]	; (800058c <HAL_FMC_MspInit+0x1a0>)
 800046c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000478:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800047c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000480:	2302      	movs	r3, #2
 8000482:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800048c:	2303      	movs	r3, #3
 800048e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000492:	230c      	movs	r3, #12
 8000494:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000498:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800049c:	4619      	mov	r1, r3
 800049e:	483c      	ldr	r0, [pc, #240]	; (8000590 <HAL_FMC_MspInit+0x1a4>)
 80004a0:	f000 fc7c 	bl	8000d9c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004a4:	230c      	movs	r3, #12
 80004a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004aa:	2302      	movs	r3, #2
 80004ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004b6:	2303      	movs	r3, #3
 80004b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80004bc:	230c      	movs	r3, #12
 80004be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80004c6:	4619      	mov	r1, r3
 80004c8:	4832      	ldr	r0, [pc, #200]	; (8000594 <HAL_FMC_MspInit+0x1a8>)
 80004ca:	f000 fc67 	bl	8000d9c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d4:	2302      	movs	r3, #2
 80004d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004e0:	2303      	movs	r3, #3
 80004e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80004e6:	230c      	movs	r3, #12
 80004e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80004f0:	4619      	mov	r1, r3
 80004f2:	4829      	ldr	r0, [pc, #164]	; (8000598 <HAL_FMC_MspInit+0x1ac>)
 80004f4:	f000 fc52 	bl	8000d9c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 80004f8:	f248 1313 	movw	r3, #33043	; 0x8113
 80004fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000500:	2302      	movs	r3, #2
 8000502:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800050c:	2303      	movs	r3, #3
 800050e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000512:	230c      	movs	r3, #12
 8000514:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000518:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800051c:	4619      	mov	r1, r3
 800051e:	481f      	ldr	r0, [pc, #124]	; (800059c <HAL_FMC_MspInit+0x1b0>)
 8000520:	f000 fc3c 	bl	8000d9c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000524:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000538:	2303      	movs	r3, #3
 800053a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800053e:	230c      	movs	r3, #12
 8000540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000544:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000548:	4619      	mov	r1, r3
 800054a:	4815      	ldr	r0, [pc, #84]	; (80005a0 <HAL_FMC_MspInit+0x1b4>)
 800054c:	f000 fc26 	bl	8000d9c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000550:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000554:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	2302      	movs	r3, #2
 800055a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800056a:	230c      	movs	r3, #12
 800056c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000570:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000574:	4619      	mov	r1, r3
 8000576:	480b      	ldr	r0, [pc, #44]	; (80005a4 <HAL_FMC_MspInit+0x1b8>)
 8000578:	f000 fc10 	bl	8000d9c <HAL_GPIO_Init>
 800057c:	e000      	b.n	8000580 <HAL_FMC_MspInit+0x194>
    return;
 800057e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000580:	37d8      	adds	r7, #216	; 0xd8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	24000060 	.word	0x24000060
 800058c:	58024400 	.word	0x58024400
 8000590:	58021400 	.word	0x58021400
 8000594:	58020800 	.word	0x58020800
 8000598:	58020000 	.word	0x58020000
 800059c:	58021800 	.word	0x58021800
 80005a0:	58021000 	.word	0x58021000
 80005a4:	58020c00 	.word	0x58020c00

080005a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80005b0:	f7ff ff1c 	bl	80003ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4b30      	ldr	r3, [pc, #192]	; (8000684 <MX_GPIO_Init+0xc8>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c8:	4a2e      	ldr	r2, [pc, #184]	; (8000684 <MX_GPIO_Init+0xc8>)
 80005ca:	f043 0320 	orr.w	r3, r3, #32
 80005ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005d2:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <MX_GPIO_Init+0xc8>)
 80005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <MX_GPIO_Init+0xc8>)
 80005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e6:	4a27      	ldr	r2, [pc, #156]	; (8000684 <MX_GPIO_Init+0xc8>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <MX_GPIO_Init+0xc8>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_GPIO_Init+0xc8>)
 8000600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000604:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <MX_GPIO_Init+0xc8>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_GPIO_Init+0xc8>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_GPIO_Init+0xc8>)
 800061e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_GPIO_Init+0xc8>)
 8000624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000628:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_GPIO_Init+0xc8>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_GPIO_Init+0xc8>)
 800063c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000640:	4a10      	ldr	r2, [pc, #64]	; (8000684 <MX_GPIO_Init+0xc8>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_GPIO_Init+0xc8>)
 800064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000650:	f003 0310 	and.w	r3, r3, #16
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_GPIO_Init+0xc8>)
 800065a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <MX_GPIO_Init+0xc8>)
 8000660:	f043 0308 	orr.w	r3, r3, #8
 8000664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_GPIO_Init+0xc8>)
 800066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

}
 8000676:	bf00      	nop
 8000678:	371c      	adds	r7, #28
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	58024400 	.word	0x58024400

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 f9df 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f82b 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f7ff ff91 	bl	80005bc <MX_GPIO_Init>
  MX_FMC_Init();
 800069a:	f7ff fe1d 	bl	80002d8 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  char str1[] = "Hello";
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <main+0x58>)
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a8:	6018      	str	r0, [r3, #0]
 80006aa:	3304      	adds	r3, #4
 80006ac:	8019      	strh	r1, [r3, #0]
    char str2[] = "World";
 80006ae:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <main+0x5c>)
 80006b0:	463b      	mov	r3, r7
 80006b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b6:	6018      	str	r0, [r3, #0]
 80006b8:	3304      	adds	r3, #4
 80006ba:	8019      	strh	r1, [r3, #0]

    /* Copies contents of str2 to str1 */
    memcpy ((uint32_t *) 0xC0000000, str1, sizeof(str1));
 80006bc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80006c0:	f107 0208 	add.w	r2, r7, #8
 80006c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c8:	6018      	str	r0, [r3, #0]
 80006ca:	3304      	adds	r3, #4
 80006cc:	8019      	strh	r1, [r3, #0]
    memcpy ((uint32_t *) 0xC0000000 + sizeof(str1), str2, sizeof(str2));
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <main+0x60>)
 80006d0:	463a      	mov	r2, r7
 80006d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d6:	6018      	str	r0, [r3, #0]
 80006d8:	3304      	adds	r3, #4
 80006da:	8019      	strh	r1, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <main+0x54>
 80006de:	bf00      	nop
 80006e0:	08003528 	.word	0x08003528
 80006e4:	08003530 	.word	0x08003530
 80006e8:	c0000018 	.word	0xc0000018

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09e      	sub	sp, #120	; 0x78
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f6:	224c      	movs	r2, #76	; 0x4c
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 ff00 	bl	8003500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fef9 	bl	8003500 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800070e:	2002      	movs	r0, #2
 8000710:	f000 fcf4 	bl	80010fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b4c      	ldr	r3, [pc, #304]	; (800084c <SystemClock_Config+0x160>)
 800071a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071c:	4a4b      	ldr	r2, [pc, #300]	; (800084c <SystemClock_Config+0x160>)
 800071e:	f023 0301 	bic.w	r3, r3, #1
 8000722:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000724:	4b49      	ldr	r3, [pc, #292]	; (800084c <SystemClock_Config+0x160>)
 8000726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b48      	ldr	r3, [pc, #288]	; (8000850 <SystemClock_Config+0x164>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a47      	ldr	r2, [pc, #284]	; (8000850 <SystemClock_Config+0x164>)
 8000734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b45      	ldr	r3, [pc, #276]	; (8000850 <SystemClock_Config+0x164>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000746:	bf00      	nop
 8000748:	4b41      	ldr	r3, [pc, #260]	; (8000850 <SystemClock_Config+0x164>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000754:	d1f8      	bne.n	8000748 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b3f      	ldr	r3, [pc, #252]	; (8000854 <SystemClock_Config+0x168>)
 8000758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800075c:	4a3d      	ldr	r2, [pc, #244]	; (8000854 <SystemClock_Config+0x168>)
 800075e:	f043 0302 	orr.w	r3, r3, #2
 8000762:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000766:	4b3b      	ldr	r3, [pc, #236]	; (8000854 <SystemClock_Config+0x168>)
 8000768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	4b35      	ldr	r3, [pc, #212]	; (8000850 <SystemClock_Config+0x164>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a34      	ldr	r2, [pc, #208]	; (8000850 <SystemClock_Config+0x164>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b32      	ldr	r3, [pc, #200]	; (8000850 <SystemClock_Config+0x164>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <SystemClock_Config+0x160>)
 8000790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000792:	4a2e      	ldr	r2, [pc, #184]	; (800084c <SystemClock_Config+0x160>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	62d3      	str	r3, [r2, #44]	; 0x2c
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <SystemClock_Config+0x160>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a6:	bf00      	nop
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <SystemClock_Config+0x164>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b4:	d1f8      	bne.n	80007a8 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <SystemClock_Config+0x168>)
 80007b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ba:	4a26      	ldr	r2, [pc, #152]	; (8000854 <SystemClock_Config+0x168>)
 80007bc:	f023 0303 	bic.w	r3, r3, #3
 80007c0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2340      	movs	r3, #64	; 0x40
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2300      	movs	r3, #0
 80007d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d6:	2308      	movs	r3, #8
 80007d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 120;
 80007da:	2378      	movs	r3, #120	; 0x78
 80007dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007de:	2302      	movs	r3, #2
 80007e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ea:	230c      	movs	r3, #12
 80007ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fcb8 	bl	8001170 <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8000806:	f000 f827 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	233f      	movs	r3, #63	; 0x3f
 800080c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2303      	movs	r3, #3
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000816:	2308      	movs	r3, #8
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000828:	2340      	movs	r3, #64	; 0x40
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2104      	movs	r1, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f8ca 	bl	80019cc <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x156>
  {
    Error_Handler();
 800083e:	f000 f80b 	bl	8000858 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3778      	adds	r7, #120	; 0x78
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	58000400 	.word	0x58000400
 8000850:	58024800 	.word	0x58024800
 8000854:	58024400 	.word	0x58024400

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_MspInit+0x30>)
 800086c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x30>)
 8000872:	f043 0302 	orr.w	r3, r3, #2
 8000876:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x30>)
 800087c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	58024400 	.word	0x58024400

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f926 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <SystemInit+0xe4>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a36      	ldr	r2, [pc, #216]	; (80009d0 <SystemInit+0xe4>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000900:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <SystemInit+0xe8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 030f 	and.w	r3, r3, #15
 8000908:	2b06      	cmp	r3, #6
 800090a:	d807      	bhi.n	800091c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800090c:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <SystemInit+0xe8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f023 030f 	bic.w	r3, r3, #15
 8000914:	4a2f      	ldr	r2, [pc, #188]	; (80009d4 <SystemInit+0xe8>)
 8000916:	f043 0307 	orr.w	r3, r3, #7
 800091a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <SystemInit+0xec>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <SystemInit+0xec>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <SystemInit+0xec>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <SystemInit+0xec>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4929      	ldr	r1, [pc, #164]	; (80009d8 <SystemInit+0xec>)
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <SystemInit+0xf0>)
 8000936:	4013      	ands	r3, r2
 8000938:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <SystemInit+0xe8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	2b00      	cmp	r3, #0
 8000944:	d007      	beq.n	8000956 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <SystemInit+0xe8>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f023 030f 	bic.w	r3, r3, #15
 800094e:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <SystemInit+0xe8>)
 8000950:	f043 0307 	orr.w	r3, r3, #7
 8000954:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <SystemInit+0xec>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <SystemInit+0xec>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <SystemInit+0xec>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <SystemInit+0xec>)
 800096a:	4a1d      	ldr	r2, [pc, #116]	; (80009e0 <SystemInit+0xf4>)
 800096c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <SystemInit+0xec>)
 8000970:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <SystemInit+0xf8>)
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <SystemInit+0xec>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <SystemInit+0xfc>)
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <SystemInit+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <SystemInit+0xec>)
 8000982:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <SystemInit+0xfc>)
 8000984:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <SystemInit+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <SystemInit+0xec>)
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <SystemInit+0xfc>)
 8000990:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <SystemInit+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <SystemInit+0xec>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <SystemInit+0xec>)
 800099e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <SystemInit+0xec>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <SystemInit+0x100>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <SystemInit+0x104>)
 80009b0:	4013      	ands	r3, r2
 80009b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009b6:	d202      	bcs.n	80009be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <SystemInit+0x108>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <SystemInit+0x10c>)
 80009c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00
 80009d4:	52002000 	.word	0x52002000
 80009d8:	58024400 	.word	0x58024400
 80009dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80009e0:	02020200 	.word	0x02020200
 80009e4:	01ff0000 	.word	0x01ff0000
 80009e8:	01010280 	.word	0x01010280
 80009ec:	5c001000 	.word	0x5c001000
 80009f0:	ffff0000 	.word	0xffff0000
 80009f4:	51008108 	.word	0x51008108
 80009f8:	52004000 	.word	0x52004000

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a00:	f7ff ff74 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f002 fd45 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fe2b 	bl	8000688 <main>
  bx  lr
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a3c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a40:	08003550 	.word	0x08003550
  ldr r2, =_sbss
 8000a44:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a48:	24000068 	.word	0x24000068

08000a4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC3_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a56:	2003      	movs	r0, #3
 8000a58:	f000 f96e 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a5c:	f001 f96c 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8000a60:	4602      	mov	r2, r0
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_Init+0x68>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	0a1b      	lsrs	r3, r3, #8
 8000a68:	f003 030f 	and.w	r3, r3, #15
 8000a6c:	4913      	ldr	r1, [pc, #76]	; (8000abc <HAL_Init+0x6c>)
 8000a6e:	5ccb      	ldrb	r3, [r1, r3]
 8000a70:	f003 031f 	and.w	r3, r3, #31
 8000a74:	fa22 f303 	lsr.w	r3, r2, r3
 8000a78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_Init+0x68>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_Init+0x6c>)
 8000a84:	5cd3      	ldrb	r3, [r2, r3]
 8000a86:	f003 031f 	and.w	r3, r3, #31
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_Init+0x70>)
 8000a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a94:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <HAL_Init+0x74>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f000 f814 	bl	8000ac8 <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e002      	b.n	8000ab0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aaa:	f7ff fedb 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58024400 	.word	0x58024400
 8000abc:	08003538 	.word	0x08003538
 8000ac0:	24000004 	.word	0x24000004
 8000ac4:	24000000 	.word	0x24000000

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_InitTick+0x60>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e021      	b.n	8000b20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_InitTick+0x64>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <HAL_InitTick+0x60>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f945 	bl	8000d82 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f91d 	bl	8000d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x68>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2400000c 	.word	0x2400000c
 8000b2c:	24000000 	.word	0x24000000
 8000b30:	24000008 	.word	0x24000008

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2400000c 	.word	0x2400000c
 8000b58:	24000064 	.word	0x24000064

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	24000064 	.word	0x24000064

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ffee 	bl	8000b5c <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffde 	bl	8000b5c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2400000c 	.word	0x2400000c

08000bbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetREVID+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	0c1b      	lsrs	r3, r3, #16
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	5c001000 	.word	0x5c001000

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <__NVIC_SetPriorityGrouping+0x40>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x40>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	05fa0000 	.word	0x05fa0000

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f7ff ff8e 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff47 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff5e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff90 	bl	8000c8c <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5f 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffb2 	bl	8000cf4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000daa:	4b89      	ldr	r3, [pc, #548]	; (8000fd0 <HAL_GPIO_Init+0x234>)
 8000dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000dae:	e194      	b.n	80010da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	2101      	movs	r1, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 8186 	beq.w	80010d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d005      	beq.n	8000de0 <HAL_GPIO_Init+0x44>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d130      	bne.n	8000e42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e16:	2201      	movs	r2, #1
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	091b      	lsrs	r3, r3, #4
 8000e2c:	f003 0201 	and.w	r2, r3, #1
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d017      	beq.n	8000e7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d123      	bne.n	8000ed2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	08da      	lsrs	r2, r3, #3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3208      	adds	r2, #8
 8000e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	691a      	ldr	r2, [r3, #16]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	69b9      	ldr	r1, [r7, #24]
 8000ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0203 	and.w	r2, r3, #3
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 80e0 	beq.w	80010d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x238>)
 8000f16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1a:	4a2e      	ldr	r2, [pc, #184]	; (8000fd4 <HAL_GPIO_Init+0x238>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <HAL_GPIO_Init+0x238>)
 8000f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <HAL_GPIO_Init+0x23c>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <HAL_GPIO_Init+0x240>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d052      	beq.n	8001004 <HAL_GPIO_Init+0x268>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <HAL_GPIO_Init+0x244>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d031      	beq.n	8000fca <HAL_GPIO_Init+0x22e>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <HAL_GPIO_Init+0x248>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d02b      	beq.n	8000fc6 <HAL_GPIO_Init+0x22a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <HAL_GPIO_Init+0x24c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d025      	beq.n	8000fc2 <HAL_GPIO_Init+0x226>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <HAL_GPIO_Init+0x250>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d01f      	beq.n	8000fbe <HAL_GPIO_Init+0x222>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <HAL_GPIO_Init+0x254>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x21e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <HAL_GPIO_Init+0x258>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x21a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_GPIO_Init+0x25c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x216>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <HAL_GPIO_Init+0x260>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x212>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_GPIO_Init+0x264>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x20e>
 8000fa6:	2309      	movs	r3, #9
 8000fa8:	e02d      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000faa:	230a      	movs	r3, #10
 8000fac:	e02b      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fae:	2308      	movs	r3, #8
 8000fb0:	e029      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e027      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	e025      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e023      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e021      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e01f      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e01d      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e01b      	b.n	8001006 <HAL_GPIO_Init+0x26a>
 8000fce:	bf00      	nop
 8000fd0:	58000080 	.word	0x58000080
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58000400 	.word	0x58000400
 8000fdc:	58020000 	.word	0x58020000
 8000fe0:	58020400 	.word	0x58020400
 8000fe4:	58020800 	.word	0x58020800
 8000fe8:	58020c00 	.word	0x58020c00
 8000fec:	58021000 	.word	0x58021000
 8000ff0:	58021400 	.word	0x58021400
 8000ff4:	58021800 	.word	0x58021800
 8000ff8:	58021c00 	.word	0x58021c00
 8000ffc:	58022000 	.word	0x58022000
 8001000:	58022400 	.word	0x58022400
 8001004:	2300      	movs	r3, #0
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	f002 0203 	and.w	r2, r2, #3
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	4093      	lsls	r3, r2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001016:	4938      	ldr	r1, [pc, #224]	; (80010f8 <HAL_GPIO_Init+0x35c>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800104a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	3301      	adds	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f ae63 	bne.w	8000db0 <HAL_GPIO_Init+0x14>
  }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3724      	adds	r7, #36	; 0x24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	58000400 	.word	0x58000400

080010fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_PWREx_ConfigSupply+0x70>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b04      	cmp	r3, #4
 800110e:	d00a      	beq.n	8001126 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_PWREx_ConfigSupply+0x70>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	d001      	beq.n	8001122 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e01f      	b.n	8001162 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e01d      	b.n	8001162 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_PWREx_ConfigSupply+0x70>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f023 0207 	bic.w	r2, r3, #7
 800112e:	490f      	ldr	r1, [pc, #60]	; (800116c <HAL_PWREx_ConfigSupply+0x70>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4313      	orrs	r3, r2
 8001134:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001136:	f7ff fd11 	bl	8000b5c <HAL_GetTick>
 800113a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800113c:	e009      	b.n	8001152 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800113e:	f7ff fd0d 	bl	8000b5c <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800114c:	d901      	bls.n	8001152 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e007      	b.n	8001162 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_PWREx_ConfigSupply+0x70>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800115a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800115e:	d1ee      	bne.n	800113e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	58024800 	.word	0x58024800

08001170 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f000 bc1d 	b.w	80019be <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 8087 	beq.w	80012a0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001192:	4b99      	ldr	r3, [pc, #612]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800119c:	4b96      	ldr	r3, [pc, #600]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	2b10      	cmp	r3, #16
 80011a6:	d007      	beq.n	80011b8 <HAL_RCC_OscConfig+0x48>
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	2b18      	cmp	r3, #24
 80011ac:	d110      	bne.n	80011d0 <HAL_RCC_OscConfig+0x60>
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d10b      	bne.n	80011d0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	4b8f      	ldr	r3, [pc, #572]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d06c      	beq.n	800129e <HAL_RCC_OscConfig+0x12e>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d168      	bne.n	800129e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e3f6      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d106      	bne.n	80011e8 <HAL_RCC_OscConfig+0x78>
 80011da:	4b87      	ldr	r3, [pc, #540]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a86      	ldr	r2, [pc, #536]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e02e      	b.n	8001246 <HAL_RCC_OscConfig+0xd6>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10c      	bne.n	800120a <HAL_RCC_OscConfig+0x9a>
 80011f0:	4b81      	ldr	r3, [pc, #516]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a80      	ldr	r2, [pc, #512]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b7e      	ldr	r3, [pc, #504]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a7d      	ldr	r2, [pc, #500]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	e01d      	b.n	8001246 <HAL_RCC_OscConfig+0xd6>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0xbe>
 8001214:	4b78      	ldr	r3, [pc, #480]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a77      	ldr	r2, [pc, #476]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 800121a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b75      	ldr	r3, [pc, #468]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a74      	ldr	r2, [pc, #464]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e00b      	b.n	8001246 <HAL_RCC_OscConfig+0xd6>
 800122e:	4b72      	ldr	r3, [pc, #456]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a71      	ldr	r2, [pc, #452]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b6f      	ldr	r3, [pc, #444]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a6e      	ldr	r2, [pc, #440]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d013      	beq.n	8001276 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fc85 	bl	8000b5c <HAL_GetTick>
 8001252:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fc81 	bl	8000b5c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e3aa      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001268:	4b63      	ldr	r3, [pc, #396]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0xe6>
 8001274:	e014      	b.n	80012a0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fc71 	bl	8000b5c <HAL_GetTick>
 800127a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127e:	f7ff fc6d 	bl	8000b5c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b64      	cmp	r3, #100	; 0x64
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e396      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001290:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x10e>
 800129c:	e000      	b.n	80012a0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80cb 	beq.w	8001444 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ae:	4b52      	ldr	r3, [pc, #328]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012b8:	4b4f      	ldr	r3, [pc, #316]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_RCC_OscConfig+0x164>
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	2b18      	cmp	r3, #24
 80012c8:	d156      	bne.n	8001378 <HAL_RCC_OscConfig+0x208>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d151      	bne.n	8001378 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d4:	4b48      	ldr	r3, [pc, #288]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_RCC_OscConfig+0x17c>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e368      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012ec:	4b42      	ldr	r3, [pc, #264]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 0219 	bic.w	r2, r3, #25
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	493f      	ldr	r1, [pc, #252]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012fe:	f7ff fc2d 	bl	8000b5c <HAL_GetTick>
 8001302:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fc29 	bl	8000b5c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e352      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	f7ff fc4a 	bl	8000bbc <HAL_GetREVID>
 8001328:	4603      	mov	r3, r0
 800132a:	f241 0203 	movw	r2, #4099	; 0x1003
 800132e:	4293      	cmp	r3, r2
 8001330:	d817      	bhi.n	8001362 <HAL_RCC_OscConfig+0x1f2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	2b40      	cmp	r3, #64	; 0x40
 8001338:	d108      	bne.n	800134c <HAL_RCC_OscConfig+0x1dc>
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001342:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800134a:	e07b      	b.n	8001444 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	031b      	lsls	r3, r3, #12
 800135a:	4927      	ldr	r1, [pc, #156]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001360:	e070      	b.n	8001444 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001362:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	061b      	lsls	r3, r3, #24
 8001370:	4921      	ldr	r1, [pc, #132]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001376:	e065      	b.n	8001444 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d048      	beq.n	8001412 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 0219 	bic.w	r2, r3, #25
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	491a      	ldr	r1, [pc, #104]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fbe3 	bl	8000b5c <HAL_GetTick>
 8001396:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fbdf 	bl	8000b5c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e308      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	f7ff fc00 	bl	8000bbc <HAL_GetREVID>
 80013bc:	4603      	mov	r3, r0
 80013be:	f241 0203 	movw	r2, #4099	; 0x1003
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d81a      	bhi.n	80013fc <HAL_RCC_OscConfig+0x28c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b40      	cmp	r3, #64	; 0x40
 80013cc:	d108      	bne.n	80013e0 <HAL_RCC_OscConfig+0x270>
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	6053      	str	r3, [r2, #4]
 80013de:	e031      	b.n	8001444 <HAL_RCC_OscConfig+0x2d4>
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	031b      	lsls	r3, r3, #12
 80013ee:	4902      	ldr	r1, [pc, #8]	; (80013f8 <HAL_RCC_OscConfig+0x288>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e026      	b.n	8001444 <HAL_RCC_OscConfig+0x2d4>
 80013f6:	bf00      	nop
 80013f8:	58024400 	.word	0x58024400
 80013fc:	4b9a      	ldr	r3, [pc, #616]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	061b      	lsls	r3, r3, #24
 800140a:	4997      	ldr	r1, [pc, #604]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
 8001410:	e018      	b.n	8001444 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b95      	ldr	r3, [pc, #596]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a94      	ldr	r2, [pc, #592]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141e:	f7ff fb9d 	bl	8000b5c <HAL_GetTick>
 8001422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fb99 	bl	8000b5c <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e2c2      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001438:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f0      	bne.n	8001426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80a9 	beq.w	80015a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001452:	4b85      	ldr	r3, [pc, #532]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800145a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800145c:	4b82      	ldr	r3, [pc, #520]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b08      	cmp	r3, #8
 8001466:	d007      	beq.n	8001478 <HAL_RCC_OscConfig+0x308>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b18      	cmp	r3, #24
 800146c:	d13a      	bne.n	80014e4 <HAL_RCC_OscConfig+0x374>
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d135      	bne.n	80014e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001478:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_OscConfig+0x320>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	2b80      	cmp	r3, #128	; 0x80
 800148a:	d001      	beq.n	8001490 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e296      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001490:	f7ff fb94 	bl	8000bbc <HAL_GetREVID>
 8001494:	4603      	mov	r3, r0
 8001496:	f241 0203 	movw	r2, #4099	; 0x1003
 800149a:	4293      	cmp	r3, r2
 800149c:	d817      	bhi.n	80014ce <HAL_RCC_OscConfig+0x35e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	d108      	bne.n	80014b8 <HAL_RCC_OscConfig+0x348>
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014b6:	e075      	b.n	80015a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014b8:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	069b      	lsls	r3, r3, #26
 80014c6:	4968      	ldr	r1, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014cc:	e06a      	b.n	80015a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014ce:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	061b      	lsls	r3, r3, #24
 80014dc:	4962      	ldr	r1, [pc, #392]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014e2:	e05f      	b.n	80015a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d042      	beq.n	8001572 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014ec:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a5d      	ldr	r2, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80014f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb30 	bl	8000b5c <HAL_GetTick>
 80014fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001500:	f7ff fb2c 	bl	8000b5c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e255      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001512:	4b55      	ldr	r3, [pc, #340]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800151e:	f7ff fb4d 	bl	8000bbc <HAL_GetREVID>
 8001522:	4603      	mov	r3, r0
 8001524:	f241 0203 	movw	r2, #4099	; 0x1003
 8001528:	4293      	cmp	r3, r2
 800152a:	d817      	bhi.n	800155c <HAL_RCC_OscConfig+0x3ec>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	2b20      	cmp	r3, #32
 8001532:	d108      	bne.n	8001546 <HAL_RCC_OscConfig+0x3d6>
 8001534:	4b4c      	ldr	r3, [pc, #304]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800153c:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800153e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001542:	6053      	str	r3, [r2, #4]
 8001544:	e02e      	b.n	80015a4 <HAL_RCC_OscConfig+0x434>
 8001546:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	069b      	lsls	r3, r3, #26
 8001554:	4944      	ldr	r1, [pc, #272]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
 800155a:	e023      	b.n	80015a4 <HAL_RCC_OscConfig+0x434>
 800155c:	4b42      	ldr	r3, [pc, #264]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	493f      	ldr	r1, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800156c:	4313      	orrs	r3, r2
 800156e:	60cb      	str	r3, [r1, #12]
 8001570:	e018      	b.n	80015a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a3c      	ldr	r2, [pc, #240]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800157c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff faed 	bl	8000b5c <HAL_GetTick>
 8001582:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001586:	f7ff fae9 	bl	8000b5c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e212      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d036      	beq.n	800161e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d019      	beq.n	80015ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80015ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015bc:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff faca 	bl	8000b5c <HAL_GetTick>
 80015c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fac6 	bl	8000b5c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e1ef      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80015e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x45c>
 80015ea:	e018      	b.n	800161e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80015ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f0:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 80015f2:	f023 0301 	bic.w	r3, r3, #1
 80015f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f8:	f7ff fab0 	bl	8000b5c <HAL_GetTick>
 80015fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001600:	f7ff faac 	bl	8000b5c <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1d5      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0320 	and.w	r3, r3, #32
 8001626:	2b00      	cmp	r3, #0
 8001628:	d039      	beq.n	800169e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d01c      	beq.n	800166c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 8001638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800163c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800163e:	f7ff fa8d 	bl	8000b5c <HAL_GetTick>
 8001642:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001646:	f7ff fa89 	bl	8000b5c <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1b2      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_RCC_OscConfig+0x4f8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x4d6>
 8001664:	e01b      	b.n	800169e <HAL_RCC_OscConfig+0x52e>
 8001666:	bf00      	nop
 8001668:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800166c:	4b9b      	ldr	r3, [pc, #620]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a9a      	ldr	r2, [pc, #616]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001676:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001678:	f7ff fa70 	bl	8000b5c <HAL_GetTick>
 800167c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001680:	f7ff fa6c 	bl	8000b5c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e195      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001692:	4b92      	ldr	r3, [pc, #584]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8081 	beq.w	80017ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016ac:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <HAL_RCC_OscConfig+0x770>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a8b      	ldr	r2, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x770>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fa50 	bl	8000b5c <HAL_GetTick>
 80016bc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016c0:	f7ff fa4c 	bl	8000b5c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	; 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e175      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016d2:	4b83      	ldr	r3, [pc, #524]	; (80018e0 <HAL_RCC_OscConfig+0x770>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d106      	bne.n	80016f4 <HAL_RCC_OscConfig+0x584>
 80016e6:	4b7d      	ldr	r3, [pc, #500]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a7c      	ldr	r2, [pc, #496]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	e02d      	b.n	8001750 <HAL_RCC_OscConfig+0x5e0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x5a6>
 80016fc:	4b77      	ldr	r3, [pc, #476]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a76      	ldr	r2, [pc, #472]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	4b74      	ldr	r3, [pc, #464]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a73      	ldr	r2, [pc, #460]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800170e:	f023 0304 	bic.w	r3, r3, #4
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e01c      	b.n	8001750 <HAL_RCC_OscConfig+0x5e0>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b05      	cmp	r3, #5
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x5c8>
 800171e:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a6e      	ldr	r2, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
 800172a:	4b6c      	ldr	r3, [pc, #432]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a6b      	ldr	r2, [pc, #428]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0x5e0>
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a67      	ldr	r2, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a64      	ldr	r2, [pc, #400]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800174a:	f023 0304 	bic.w	r3, r3, #4
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d015      	beq.n	8001784 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fa00 	bl	8000b5c <HAL_GetTick>
 800175c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff f9fc 	bl	8000b5c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e123      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001776:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0ee      	beq.n	8001760 <HAL_RCC_OscConfig+0x5f0>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff f9ea 	bl	8000b5c <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff f9e6 	bl	8000b5c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e10d      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017a2:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ee      	bne.n	800178c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8102 	beq.w	80019bc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017b8:	4b48      	ldr	r3, [pc, #288]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017c0:	2b18      	cmp	r3, #24
 80017c2:	f000 80bd 	beq.w	8001940 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	f040 809e 	bne.w	800190c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a41      	ldr	r2, [pc, #260]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80017d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff f9be 	bl	8000b5c <HAL_GetTick>
 80017e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff f9ba 	bl	8000b5c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e0e3      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_OscConfig+0x774>)
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	430a      	orrs	r2, r1
 8001816:	4931      	ldr	r1, [pc, #196]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001818:	4313      	orrs	r3, r2
 800181a:	628b      	str	r3, [r1, #40]	; 0x28
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	3b01      	subs	r3, #1
 8001822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182a:	3b01      	subs	r3, #1
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	b29b      	uxth	r3, r3
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	3b01      	subs	r3, #1
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	3b01      	subs	r3, #1
 8001846:	061b      	lsls	r3, r3, #24
 8001848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800184c:	4923      	ldr	r1, [pc, #140]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800184e:	4313      	orrs	r3, r2
 8001850:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	4a21      	ldr	r2, [pc, #132]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001864:	4013      	ands	r3, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800186a:	00d2      	lsls	r2, r2, #3
 800186c:	491b      	ldr	r1, [pc, #108]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800186e:	4313      	orrs	r3, r2
 8001870:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	f023 020c 	bic.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4917      	ldr	r1, [pc, #92]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001880:	4313      	orrs	r3, r2
 8001882:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f023 0202 	bic.w	r2, r3, #2
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	4912      	ldr	r1, [pc, #72]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001892:	4313      	orrs	r3, r2
 8001894:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_RCC_OscConfig+0x76c>)
 80018cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff f943 	bl	8000b5c <HAL_GetTick>
 80018d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018d8:	e011      	b.n	80018fe <HAL_RCC_OscConfig+0x78e>
 80018da:	bf00      	nop
 80018dc:	58024400 	.word	0x58024400
 80018e0:	58024800 	.word	0x58024800
 80018e4:	fffffc0c 	.word	0xfffffc0c
 80018e8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f936 	bl	8000b5c <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e05f      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_RCC_OscConfig+0x858>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x77c>
 800190a:	e057      	b.n	80019bc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190c:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_RCC_OscConfig+0x858>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2d      	ldr	r2, [pc, #180]	; (80019c8 <HAL_RCC_OscConfig+0x858>)
 8001912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f920 	bl	8000b5c <HAL_GetTick>
 800191c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f91c 	bl	8000b5c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e045      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_RCC_OscConfig+0x858>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x7b0>
 800193e:	e03d      	b.n	80019bc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_OscConfig+0x858>)
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_RCC_OscConfig+0x858>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	2b01      	cmp	r3, #1
 8001952:	d031      	beq.n	80019b8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f003 0203 	and.w	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d12a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d122      	bne.n	80019b8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d11a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	0a5b      	lsrs	r3, r3, #9
 8001986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d111      	bne.n	80019b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	0c1b      	lsrs	r3, r3, #16
 8001998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	0e1b      	lsrs	r3, r3, #24
 80019aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3730      	adds	r7, #48	; 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	58024400 	.word	0x58024400

080019cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e19c      	b.n	8001d1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b8a      	ldr	r3, [pc, #552]	; (8001c0c <HAL_RCC_ClockConfig+0x240>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d910      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b87      	ldr	r3, [pc, #540]	; (8001c0c <HAL_RCC_ClockConfig+0x240>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 020f 	bic.w	r2, r3, #15
 80019f6:	4985      	ldr	r1, [pc, #532]	; (8001c0c <HAL_RCC_ClockConfig+0x240>)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b83      	ldr	r3, [pc, #524]	; (8001c0c <HAL_RCC_ClockConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e184      	b.n	8001d1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d010      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d908      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a2c:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	4975      	ldr	r1, [pc, #468]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d010      	beq.n	8001a6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	4b70      	ldr	r3, [pc, #448]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d908      	bls.n	8001a6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	496a      	ldr	r1, [pc, #424]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d010      	beq.n	8001a9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699a      	ldr	r2, [r3, #24]
 8001a7c:	4b64      	ldr	r3, [pc, #400]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d908      	bls.n	8001a9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a88:	4b61      	ldr	r3, [pc, #388]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	495e      	ldr	r1, [pc, #376]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69da      	ldr	r2, [r3, #28]
 8001aaa:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d908      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ab6:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4953      	ldr	r1, [pc, #332]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d010      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	4b4d      	ldr	r3, [pc, #308]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d908      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f023 020f 	bic.w	r2, r3, #15
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4947      	ldr	r1, [pc, #284]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d055      	beq.n	8001bae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4940      	ldr	r1, [pc, #256]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b1c:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d121      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0f6      	b.n	8001d1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d115      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0ea      	b.n	8001d1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0de      	b.n	8001d1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0d6      	b.n	8001d1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f023 0207 	bic.w	r2, r3, #7
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4925      	ldr	r1, [pc, #148]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7e:	f7fe ffed 	bl	8000b5c <HAL_GetTick>
 8001b82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7fe ffe9 	bl	8000b5c <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0be      	b.n	8001d1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d1eb      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d010      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d208      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f023 020f 	bic.w	r2, r3, #15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	490e      	ldr	r1, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x244>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_ClockConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d214      	bcs.n	8001c14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_RCC_ClockConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 020f 	bic.w	r2, r3, #15
 8001bf2:	4906      	ldr	r1, [pc, #24]	; (8001c0c <HAL_RCC_ClockConfig+0x240>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <HAL_RCC_ClockConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e086      	b.n	8001d1a <HAL_RCC_ClockConfig+0x34e>
 8001c0c:	52002000 	.word	0x52002000
 8001c10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d208      	bcs.n	8001c42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c30:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	4939      	ldr	r1, [pc, #228]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d208      	bcs.n	8001c70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c5e:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	492e      	ldr	r1, [pc, #184]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d010      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699a      	ldr	r2, [r3, #24]
 8001c80:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d208      	bcs.n	8001c9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4922      	ldr	r1, [pc, #136]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d208      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4917      	ldr	r1, [pc, #92]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ccc:	f000 f834 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	4912      	ldr	r1, [pc, #72]	; (8001d28 <HAL_RCC_ClockConfig+0x35c>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_RCC_ClockConfig+0x358>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_RCC_ClockConfig+0x35c>)
 8001cf4:	5cd3      	ldrb	r3, [r2, r3]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_RCC_ClockConfig+0x360>)
 8001d02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_RCC_ClockConfig+0x364>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_RCC_ClockConfig+0x368>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe feda 	bl	8000ac8 <HAL_InitTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	58024400 	.word	0x58024400
 8001d28:	08003538 	.word	0x08003538
 8001d2c:	24000004 	.word	0x24000004
 8001d30:	24000000 	.word	0x24000000
 8001d34:	24000008 	.word	0x24000008

08001d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d3e:	4bb3      	ldr	r3, [pc, #716]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d46:	2b18      	cmp	r3, #24
 8001d48:	f200 8155 	bhi.w	8001ff6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d4c:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d52:	bf00      	nop
 8001d54:	08001db9 	.word	0x08001db9
 8001d58:	08001ff7 	.word	0x08001ff7
 8001d5c:	08001ff7 	.word	0x08001ff7
 8001d60:	08001ff7 	.word	0x08001ff7
 8001d64:	08001ff7 	.word	0x08001ff7
 8001d68:	08001ff7 	.word	0x08001ff7
 8001d6c:	08001ff7 	.word	0x08001ff7
 8001d70:	08001ff7 	.word	0x08001ff7
 8001d74:	08001ddf 	.word	0x08001ddf
 8001d78:	08001ff7 	.word	0x08001ff7
 8001d7c:	08001ff7 	.word	0x08001ff7
 8001d80:	08001ff7 	.word	0x08001ff7
 8001d84:	08001ff7 	.word	0x08001ff7
 8001d88:	08001ff7 	.word	0x08001ff7
 8001d8c:	08001ff7 	.word	0x08001ff7
 8001d90:	08001ff7 	.word	0x08001ff7
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001ff7 	.word	0x08001ff7
 8001d9c:	08001ff7 	.word	0x08001ff7
 8001da0:	08001ff7 	.word	0x08001ff7
 8001da4:	08001ff7 	.word	0x08001ff7
 8001da8:	08001ff7 	.word	0x08001ff7
 8001dac:	08001ff7 	.word	0x08001ff7
 8001db0:	08001ff7 	.word	0x08001ff7
 8001db4:	08001deb 	.word	0x08001deb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001db8:	4b94      	ldr	r3, [pc, #592]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dc4:	4b91      	ldr	r3, [pc, #580]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	4a90      	ldr	r2, [pc, #576]	; (8002010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001dd6:	e111      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001dd8:	4b8d      	ldr	r3, [pc, #564]	; (8002010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dda:	61bb      	str	r3, [r7, #24]
    break;
 8001ddc:	e10e      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001dde:	4b8d      	ldr	r3, [pc, #564]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001de0:	61bb      	str	r3, [r7, #24]
    break;
 8001de2:	e10b      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001de4:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001de6:	61bb      	str	r3, [r7, #24]
    break;
 8001de8:	e108      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dea:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001df4:	4b85      	ldr	r3, [pc, #532]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dfe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e00:	4b82      	ldr	r3, [pc, #520]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001e0a:	4b80      	ldr	r3, [pc, #512]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0e:	08db      	lsrs	r3, r3, #3
 8001e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80e1 	beq.w	8001ff0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	f000 8083 	beq.w	8001f3c <HAL_RCC_GetSysClockFreq+0x204>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	f200 80a1 	bhi.w	8001f80 <HAL_RCC_GetSysClockFreq+0x248>
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x114>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d056      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e4a:	e099      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e4c:	4b6f      	ldr	r3, [pc, #444]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d02d      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e58:	4b6c      	ldr	r3, [pc, #432]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	08db      	lsrs	r3, r3, #3
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	4a6b      	ldr	r2, [pc, #428]	; (8002010 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e64:	fa22 f303 	lsr.w	r3, r2, r3
 8001e68:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e82:	4b62      	ldr	r3, [pc, #392]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800201c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001eb2:	e087      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ebe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002020 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ec6:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800201c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ef6:	e065      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f0a:	4b40      	ldr	r3, [pc, #256]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800201c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f3a:	e043      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002028 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f4e:	4b2f      	ldr	r3, [pc, #188]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800201c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f7e:	e021      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002024 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fa6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800201c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fc2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	0a5b      	lsrs	r3, r3, #9
 8001fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fce:	3301      	adds	r3, #1
 8001fd0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001fee:	e005      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
    break;
 8001ff4:	e002      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ff8:	61bb      	str	r3, [r7, #24]
    break;
 8001ffa:	bf00      	nop
  }

  return sysclockfreq;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	58024400 	.word	0x58024400
 8002010:	03d09000 	.word	0x03d09000
 8002014:	003d0900 	.word	0x003d0900
 8002018:	007a1200 	.word	0x007a1200
 800201c:	46000000 	.word	0x46000000
 8002020:	4c742400 	.word	0x4c742400
 8002024:	4a742400 	.word	0x4a742400
 8002028:	4af42400 	.word	0x4af42400

0800202c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002034:	2300      	movs	r3, #0
 8002036:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002038:	2300      	movs	r3, #0
 800203a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d03f      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800204c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002050:	d02a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002056:	d824      	bhi.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800205c:	d018      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800205e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002062:	d81e      	bhi.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800206c:	d007      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800206e:	e018      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002070:	4ba3      	ldr	r3, [pc, #652]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	4aa2      	ldr	r2, [pc, #648]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800207c:	e015      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	2102      	movs	r1, #2
 8002084:	4618      	mov	r0, r3
 8002086:	f000 ff17 	bl	8002eb8 <RCCEx_PLL2_Config>
 800208a:	4603      	mov	r3, r0
 800208c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800208e:	e00c      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3324      	adds	r3, #36	; 0x24
 8002094:	2102      	movs	r1, #2
 8002096:	4618      	mov	r0, r3
 8002098:	f000 ffc0 	bl	800301c <RCCEx_PLL3_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80020a0:	e003      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
      break;
 80020a6:	e000      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80020b0:	4b93      	ldr	r3, [pc, #588]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020bc:	4990      	ldr	r1, [pc, #576]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	650b      	str	r3, [r1, #80]	; 0x50
 80020c2:	e001      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d03d      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d826      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	080020f9 	.word	0x080020f9
 80020e8:	08002107 	.word	0x08002107
 80020ec:	08002119 	.word	0x08002119
 80020f0:	08002131 	.word	0x08002131
 80020f4:	08002131 	.word	0x08002131
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020f8:	4b81      	ldr	r3, [pc, #516]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	4a80      	ldr	r2, [pc, #512]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002102:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002104:	e015      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fed3 	bl	8002eb8 <RCCEx_PLL2_Config>
 8002112:	4603      	mov	r3, r0
 8002114:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002116:	e00c      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3324      	adds	r3, #36	; 0x24
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f000 ff7c 	bl	800301c <RCCEx_PLL3_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002128:	e003      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
      break;
 800212e:	e000      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002138:	4b71      	ldr	r3, [pc, #452]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800213a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213c:	f023 0207 	bic.w	r2, r3, #7
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	496e      	ldr	r1, [pc, #440]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	650b      	str	r3, [r1, #80]	; 0x50
 800214a:	e001      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002158:	2b00      	cmp	r3, #0
 800215a:	d042      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002164:	d02b      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800216a:	d825      	bhi.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800216c:	2bc0      	cmp	r3, #192	; 0xc0
 800216e:	d028      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002170:	2bc0      	cmp	r3, #192	; 0xc0
 8002172:	d821      	bhi.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d016      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002178:	2b80      	cmp	r3, #128	; 0x80
 800217a:	d81d      	bhi.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002180:	2b40      	cmp	r3, #64	; 0x40
 8002182:	d007      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002184:	e018      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002186:	4b5e      	ldr	r3, [pc, #376]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	4a5d      	ldr	r2, [pc, #372]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002192:	e017      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fe8c 	bl	8002eb8 <RCCEx_PLL2_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021a4:	e00e      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3324      	adds	r3, #36	; 0x24
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 ff35 	bl	800301c <RCCEx_PLL3_Config>
 80021b2:	4603      	mov	r3, r0
 80021b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021b6:	e005      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	75fb      	strb	r3, [r7, #23]
      break;
 80021bc:	e002      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80021be:	bf00      	nop
 80021c0:	e000      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80021c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80021ca:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	494a      	ldr	r1, [pc, #296]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	650b      	str	r3, [r1, #80]	; 0x50
 80021dc:	e001      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d049      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021f8:	d030      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80021fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021fe:	d82a      	bhi.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002200:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002204:	d02c      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002206:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800220a:	d824      	bhi.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800220c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002210:	d018      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002216:	d81e      	bhi.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800221c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002220:	d007      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002222:	e018      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	4a35      	ldr	r2, [pc, #212]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800222a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002230:	e017      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fe3d 	bl	8002eb8 <RCCEx_PLL2_Config>
 800223e:	4603      	mov	r3, r0
 8002240:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002242:	e00e      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3324      	adds	r3, #36	; 0x24
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fee6 	bl	800301c <RCCEx_PLL3_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002254:	e005      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	75fb      	strb	r3, [r7, #23]
      break;
 800225a:	e002      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800225c:	bf00      	nop
 800225e:	e000      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10a      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002276:	4922      	ldr	r1, [pc, #136]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	658b      	str	r3, [r1, #88]	; 0x58
 800227c:	e001      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228a:	2b00      	cmp	r3, #0
 800228c:	d04b      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002298:	d030      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800229a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800229e:	d82a      	bhi.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80022a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022a4:	d02e      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80022a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022aa:	d824      	bhi.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80022ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022b0:	d018      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80022b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022b6:	d81e      	bhi.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c0:	d007      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80022c2:	e018      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022d0:	e019      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fded 	bl	8002eb8 <RCCEx_PLL2_Config>
 80022de:	4603      	mov	r3, r0
 80022e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80022e2:	e010      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3324      	adds	r3, #36	; 0x24
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fe96 	bl	800301c <RCCEx_PLL3_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022f4:	e007      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
      break;
 80022fa:	e004      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80022fc:	bf00      	nop
 80022fe:	e002      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002300:	58024400 	.word	0x58024400
      break;
 8002304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800230c:	4b99      	ldr	r3, [pc, #612]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800231a:	4996      	ldr	r1, [pc, #600]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800231c:	4313      	orrs	r3, r2
 800231e:	658b      	str	r3, [r1, #88]	; 0x58
 8002320:	e001      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d032      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002336:	2b30      	cmp	r3, #48	; 0x30
 8002338:	d01c      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800233a:	2b30      	cmp	r3, #48	; 0x30
 800233c:	d817      	bhi.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800233e:	2b20      	cmp	r3, #32
 8002340:	d00c      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002342:	2b20      	cmp	r3, #32
 8002344:	d813      	bhi.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800234a:	2b10      	cmp	r3, #16
 800234c:	d10f      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800234e:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	4a88      	ldr	r2, [pc, #544]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800235a:	e00e      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fda8 	bl	8002eb8 <RCCEx_PLL2_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800236c:	e005      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
      break;
 8002372:	e002      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002374:	bf00      	nop
 8002376:	e000      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237a:	7dfb      	ldrb	r3, [r7, #23]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002380:	4b7c      	ldr	r3, [pc, #496]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238c:	4979      	ldr	r1, [pc, #484]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800238e:	4313      	orrs	r3, r2
 8002390:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002392:	e001      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d047      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ac:	d030      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80023ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023b2:	d82a      	bhi.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80023b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023b8:	d02c      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80023ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023be:	d824      	bhi.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80023c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c4:	d018      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80023c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ca:	d81e      	bhi.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80023d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d4:	d007      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80023d6:	e018      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023d8:	4b66      	ldr	r3, [pc, #408]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	4a65      	ldr	r2, [pc, #404]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80023e4:	e017      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fd63 	bl	8002eb8 <RCCEx_PLL2_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80023f6:	e00e      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3324      	adds	r3, #36	; 0x24
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fe0c 	bl	800301c <RCCEx_PLL3_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002408:	e005      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
      break;
 800240e:	e002      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002416:	7dfb      	ldrb	r3, [r7, #23]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800241c:	4b55      	ldr	r3, [pc, #340]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800241e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002420:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	4952      	ldr	r1, [pc, #328]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800242a:	4313      	orrs	r3, r2
 800242c:	650b      	str	r3, [r1, #80]	; 0x50
 800242e:	e001      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d049      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002448:	d02e      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800244a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244e:	d828      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002450:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002454:	d02a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800245a:	d822      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800245c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002460:	d026      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002462:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002466:	d81c      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800246c:	d010      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800246e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002472:	d816      	bhi.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01d      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d111      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	2101      	movs	r1, #1
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fd17 	bl	8002eb8 <RCCEx_PLL2_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800248e:	e012      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3324      	adds	r3, #36	; 0x24
 8002494:	2101      	movs	r1, #1
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fdc0 	bl	800301c <RCCEx_PLL3_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80024a0:	e009      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
      break;
 80024a6:	e006      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80024a8:	bf00      	nop
 80024aa:	e004      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80024ac:	bf00      	nop
 80024ae:	e002      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80024b0:	bf00      	nop
 80024b2:	e000      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80024b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c8:	492a      	ldr	r1, [pc, #168]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	650b      	str	r3, [r1, #80]	; 0x50
 80024ce:	e001      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d04d      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80024e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ea:	d02e      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80024ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f0:	d828      	bhi.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d02a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fc:	d822      	bhi.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80024fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002502:	d026      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002508:	d81c      	bhi.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800250a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250e:	d010      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002514:	d816      	bhi.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01d      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800251a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800251e:	d111      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	2101      	movs	r1, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fcc6 	bl	8002eb8 <RCCEx_PLL2_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002530:	e012      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3324      	adds	r3, #36	; 0x24
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fd6f 	bl	800301c <RCCEx_PLL3_Config>
 800253e:	4603      	mov	r3, r0
 8002540:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002542:	e009      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	75fb      	strb	r3, [r7, #23]
      break;
 8002548:	e006      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800254a:	bf00      	nop
 800254c:	e004      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800254e:	bf00      	nop
 8002550:	e002      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800256c:	4901      	ldr	r1, [pc, #4]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800256e:	4313      	orrs	r3, r2
 8002570:	658b      	str	r3, [r1, #88]	; 0x58
 8002572:	e003      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02f      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002590:	d00e      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002596:	d814      	bhi.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d015      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800259c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025a2:	4baf      	ldr	r3, [pc, #700]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	4aae      	ldr	r2, [pc, #696]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80025ae:	e00c      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	2101      	movs	r1, #1
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fc7e 	bl	8002eb8 <RCCEx_PLL2_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80025c0:	e003      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
      break;
 80025c6:	e000      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80025c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025d0:	4ba3      	ldr	r3, [pc, #652]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80025d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025dc:	49a0      	ldr	r1, [pc, #640]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	650b      	str	r3, [r1, #80]	; 0x50
 80025e2:	e001      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d032      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d81b      	bhi.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	0800263b 	.word	0x0800263b
 8002608:	08002615 	.word	0x08002615
 800260c:	08002623 	.word	0x08002623
 8002610:	0800263b 	.word	0x0800263b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002614:	4b92      	ldr	r3, [pc, #584]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	4a91      	ldr	r2, [pc, #580]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800261a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002620:	e00c      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	2102      	movs	r1, #2
 8002628:	4618      	mov	r0, r3
 800262a:	f000 fc45 	bl	8002eb8 <RCCEx_PLL2_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002632:	e003      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	75fb      	strb	r3, [r7, #23]
      break;
 8002638:	e000      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800263a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002642:	4b87      	ldr	r3, [pc, #540]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4984      	ldr	r1, [pc, #528]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002650:	4313      	orrs	r3, r2
 8002652:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002654:	e001      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8086 	beq.w	8002774 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002668:	4b7e      	ldr	r3, [pc, #504]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a7d      	ldr	r2, [pc, #500]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002674:	f7fe fa72 	bl	8000b5c <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800267a:	e009      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267c:	f7fe fa6e 	bl	8000b5c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d902      	bls.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	75fb      	strb	r3, [r7, #23]
        break;
 800268e:	e005      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002690:	4b74      	ldr	r3, [pc, #464]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d166      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80026a2:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026ac:	4053      	eors	r3, r2
 80026ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d013      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026b6:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c0:	4b67      	ldr	r3, [pc, #412]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a66      	ldr	r2, [pc, #408]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026cc:	4b64      	ldr	r3, [pc, #400]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a63      	ldr	r2, [pc, #396]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80026d8:	4a61      	ldr	r2, [pc, #388]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e8:	d115      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe fa37 	bl	8000b5c <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026f0:	e00b      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe fa33 	bl	8000b5c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d902      	bls.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	75fb      	strb	r3, [r7, #23]
            break;
 8002708:	e005      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800270a:	4b55      	ldr	r3, [pc, #340]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0ed      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d126      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800272a:	d10d      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800272c:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800273a:	0919      	lsrs	r1, r3, #4
 800273c:	4b4a      	ldr	r3, [pc, #296]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800273e:	400b      	ands	r3, r1
 8002740:	4947      	ldr	r1, [pc, #284]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002742:	4313      	orrs	r3, r2
 8002744:	610b      	str	r3, [r1, #16]
 8002746:	e005      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002748:	4b45      	ldr	r3, [pc, #276]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	4a44      	ldr	r2, [pc, #272]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800274e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002752:	6113      	str	r3, [r2, #16]
 8002754:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002756:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002762:	493f      	ldr	r1, [pc, #252]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002764:	4313      	orrs	r3, r2
 8002766:	670b      	str	r3, [r1, #112]	; 0x70
 8002768:	e004      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	75bb      	strb	r3, [r7, #22]
 800276e:	e001      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8085 	beq.w	800288c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002786:	2b28      	cmp	r3, #40	; 0x28
 8002788:	d866      	bhi.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800278a:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	0800286d 	.word	0x0800286d
 8002794:	08002859 	.word	0x08002859
 8002798:	08002859 	.word	0x08002859
 800279c:	08002859 	.word	0x08002859
 80027a0:	08002859 	.word	0x08002859
 80027a4:	08002859 	.word	0x08002859
 80027a8:	08002859 	.word	0x08002859
 80027ac:	08002859 	.word	0x08002859
 80027b0:	08002835 	.word	0x08002835
 80027b4:	08002859 	.word	0x08002859
 80027b8:	08002859 	.word	0x08002859
 80027bc:	08002859 	.word	0x08002859
 80027c0:	08002859 	.word	0x08002859
 80027c4:	08002859 	.word	0x08002859
 80027c8:	08002859 	.word	0x08002859
 80027cc:	08002859 	.word	0x08002859
 80027d0:	08002847 	.word	0x08002847
 80027d4:	08002859 	.word	0x08002859
 80027d8:	08002859 	.word	0x08002859
 80027dc:	08002859 	.word	0x08002859
 80027e0:	08002859 	.word	0x08002859
 80027e4:	08002859 	.word	0x08002859
 80027e8:	08002859 	.word	0x08002859
 80027ec:	08002859 	.word	0x08002859
 80027f0:	0800286d 	.word	0x0800286d
 80027f4:	08002859 	.word	0x08002859
 80027f8:	08002859 	.word	0x08002859
 80027fc:	08002859 	.word	0x08002859
 8002800:	08002859 	.word	0x08002859
 8002804:	08002859 	.word	0x08002859
 8002808:	08002859 	.word	0x08002859
 800280c:	08002859 	.word	0x08002859
 8002810:	0800286d 	.word	0x0800286d
 8002814:	08002859 	.word	0x08002859
 8002818:	08002859 	.word	0x08002859
 800281c:	08002859 	.word	0x08002859
 8002820:	08002859 	.word	0x08002859
 8002824:	08002859 	.word	0x08002859
 8002828:	08002859 	.word	0x08002859
 800282c:	08002859 	.word	0x08002859
 8002830:	0800286d 	.word	0x0800286d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fb3c 	bl	8002eb8 <RCCEx_PLL2_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002844:	e013      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3324      	adds	r3, #36	; 0x24
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fbe5 	bl	800301c <RCCEx_PLL3_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002856:	e00a      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	75fb      	strb	r3, [r7, #23]
      break;
 800285c:	e007      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800285e:	bf00      	nop
 8002860:	58024400 	.word	0x58024400
 8002864:	58024800 	.word	0x58024800
 8002868:	00ffffcf 	.word	0x00ffffcf
      break;
 800286c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002874:	4b96      	ldr	r3, [pc, #600]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002880:	4993      	ldr	r1, [pc, #588]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	654b      	str	r3, [r1, #84]	; 0x54
 8002886:	e001      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d038      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289c:	2b05      	cmp	r3, #5
 800289e:	d821      	bhi.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028eb 	.word	0x080028eb
 80028ac:	080028c1 	.word	0x080028c1
 80028b0:	080028d3 	.word	0x080028d3
 80028b4:	080028eb 	.word	0x080028eb
 80028b8:	080028eb 	.word	0x080028eb
 80028bc:	080028eb 	.word	0x080028eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	2101      	movs	r1, #1
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 faf6 	bl	8002eb8 <RCCEx_PLL2_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80028d0:	e00c      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3324      	adds	r3, #36	; 0x24
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fb9f 	bl	800301c <RCCEx_PLL3_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80028e2:	e003      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	75fb      	strb	r3, [r7, #23]
      break;
 80028e8:	e000      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80028ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80028f2:	4b77      	ldr	r3, [pc, #476]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f023 0207 	bic.w	r2, r3, #7
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fe:	4974      	ldr	r1, [pc, #464]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	654b      	str	r3, [r1, #84]	; 0x54
 8002904:	e001      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d03a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291c:	2b05      	cmp	r3, #5
 800291e:	d821      	bhi.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002920:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	0800296b 	.word	0x0800296b
 800292c:	08002941 	.word	0x08002941
 8002930:	08002953 	.word	0x08002953
 8002934:	0800296b 	.word	0x0800296b
 8002938:	0800296b 	.word	0x0800296b
 800293c:	0800296b 	.word	0x0800296b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	2101      	movs	r1, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fab6 	bl	8002eb8 <RCCEx_PLL2_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002950:	e00c      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3324      	adds	r3, #36	; 0x24
 8002956:	2101      	movs	r1, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fb5f 	bl	800301c <RCCEx_PLL3_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002962:	e003      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	75fb      	strb	r3, [r7, #23]
      break;
 8002968:	e000      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800296a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002972:	4b57      	ldr	r3, [pc, #348]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	4953      	ldr	r1, [pc, #332]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	658b      	str	r3, [r1, #88]	; 0x58
 8002986:	e001      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d04b      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800299e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a2:	d02e      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80029a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a8:	d828      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d02a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d822      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80029b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029ba:	d026      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80029bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029c0:	d81c      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80029c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c6:	d010      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80029c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029cc:	d816      	bhi.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01d      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80029d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d6:	d111      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fa6a 	bl	8002eb8 <RCCEx_PLL2_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80029e8:	e012      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3324      	adds	r3, #36	; 0x24
 80029ee:	2102      	movs	r1, #2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fb13 	bl	800301c <RCCEx_PLL3_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80029fa:	e009      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002a00:	e006      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002a02:	bf00      	nop
 8002a04:	e004      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002a06:	bf00      	nop
 8002a08:	e002      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e000      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a16:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a24:	492a      	ldr	r1, [pc, #168]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	654b      	str	r3, [r1, #84]	; 0x54
 8002a2a:	e001      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d04d      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002a46:	d02e      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002a48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002a4c:	d828      	bhi.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a52:	d02a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a58:	d822      	bhi.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002a5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a5e:	d026      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a64:	d81c      	bhi.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a6a:	d010      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a70:	d816      	bhi.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01d      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d111      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fa18 	bl	8002eb8 <RCCEx_PLL2_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002a8c:	e012      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3324      	adds	r3, #36	; 0x24
 8002a92:	2102      	movs	r1, #2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fac1 	bl	800301c <RCCEx_PLL3_Config>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002a9e:	e009      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa4:	e006      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e004      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e002      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac8:	4901      	ldr	r1, [pc, #4]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	658b      	str	r3, [r1, #88]	; 0x58
 8002ace:	e003      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002ad0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d04b      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002aee:	d02e      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002af0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002af4:	d828      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afa:	d02a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b00:	d822      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002b02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002b06:	d026      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002b08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002b0c:	d81c      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b12:	d010      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b18:	d816      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01d      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b22:	d111      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f9c4 	bl	8002eb8 <RCCEx_PLL2_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002b34:	e012      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3324      	adds	r3, #36	; 0x24
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fa6d 	bl	800301c <RCCEx_PLL3_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002b46:	e009      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b4c:	e006      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002b4e:	bf00      	nop
 8002b50:	e004      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10a      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002b62:	4b9d      	ldr	r3, [pc, #628]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b70:	4999      	ldr	r1, [pc, #612]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	658b      	str	r3, [r1, #88]	; 0x58
 8002b76:	e001      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b92:	d10a      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3324      	adds	r3, #36	; 0x24
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fa3e 	bl	800301c <RCCEx_PLL3_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002baa:	4b8b      	ldr	r3, [pc, #556]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb8:	4987      	ldr	r1, [pc, #540]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd4:	d10a      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3324      	adds	r3, #36	; 0x24
 8002bda:	2102      	movs	r1, #2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fa1d 	bl	800301c <RCCEx_PLL3_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bec:	4b7a      	ldr	r3, [pc, #488]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfa:	4977      	ldr	r1, [pc, #476]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d034      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c16:	d01d      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c1c:	d817      	bhi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c26:	d009      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002c28:	e011      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f941 	bl	8002eb8 <RCCEx_PLL2_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002c3a:	e00c      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3324      	adds	r3, #36	; 0x24
 8002c40:	2102      	movs	r1, #2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f9ea 	bl	800301c <RCCEx_PLL3_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002c4c:	e003      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
      break;
 8002c52:	e000      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c5c:	4b5e      	ldr	r3, [pc, #376]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c6a:	495b      	ldr	r1, [pc, #364]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	658b      	str	r3, [r1, #88]	; 0x58
 8002c70:	e001      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
 8002c74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d033      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c8c:	d01c      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002c8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c92:	d816      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c9e:	d007      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002ca0:	e00f      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca2:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	4a4c      	ldr	r2, [pc, #304]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002cae:	e00c      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3324      	adds	r3, #36	; 0x24
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f9b0 	bl	800301c <RCCEx_PLL3_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002cc0:	e003      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc6:	e000      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd0:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cde:	493e      	ldr	r1, [pc, #248]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	654b      	str	r3, [r1, #84]	; 0x54
 8002ce4:	e001      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce6:	7dfb      	ldrb	r3, [r7, #23]
 8002ce8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d029      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d02:	d007      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002d04:	e00f      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d06:	4b34      	ldr	r3, [pc, #208]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	4a33      	ldr	r2, [pc, #204]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002d12:	e00b      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	2102      	movs	r1, #2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f8cc 	bl	8002eb8 <RCCEx_PLL2_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002d24:	e002      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
      break;
 8002d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002d32:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3e:	4926      	ldr	r1, [pc, #152]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d44:	e001      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3324      	adds	r3, #36	; 0x24
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 f95d 	bl	800301c <RCCEx_PLL3_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d033      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d80:	d017      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d86:	d811      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8c:	d013      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d92:	d80b      	bhi.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8002d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9c:	d106      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002daa:	e007      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	75fb      	strb	r3, [r7, #23]
      break;
 8002db0:	e004      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dce:	4902      	ldr	r1, [pc, #8]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	654b      	str	r3, [r1, #84]	; 0x54
 8002dd4:	e004      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8002dd6:	bf00      	nop
 8002dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dec:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	492e      	ldr	r1, [pc, #184]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e18:	4926      	ldr	r1, [pc, #152]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e36:	491f      	ldr	r1, [pc, #124]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e48:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e52:	6113      	str	r3, [r2, #16]
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e5e:	4915      	ldr	r1, [pc, #84]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da08      	bge.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	4906      	ldr	r1, [pc, #24]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002e9e:	7dbb      	ldrb	r3, [r7, #22]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	58024400 	.word	0x58024400

08002eb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002ec6:	4b53      	ldr	r3, [pc, #332]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d101      	bne.n	8002ed6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e099      	b.n	800300a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002ed6:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a4e      	ldr	r2, [pc, #312]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002edc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee2:	f7fd fe3b 	bl	8000b5c <HAL_GetTick>
 8002ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002ee8:	e008      	b.n	8002efc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002eea:	f7fd fe37 	bl	8000b5c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e086      	b.n	800300a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002efc:	4b45      	ldr	r3, [pc, #276]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002f08:	4b42      	ldr	r3, [pc, #264]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	031b      	lsls	r3, r3, #12
 8002f16:	493f      	ldr	r1, [pc, #252]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	628b      	str	r3, [r1, #40]	; 0x28
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	025b      	lsls	r3, r3, #9
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	061b      	lsls	r3, r3, #24
 8002f48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f4c:	4931      	ldr	r1, [pc, #196]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002f52:	4b30      	ldr	r3, [pc, #192]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	492d      	ldr	r1, [pc, #180]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f023 0220 	bic.w	r2, r3, #32
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4928      	ldr	r1, [pc, #160]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002f76:	4b27      	ldr	r3, [pc, #156]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	4a26      	ldr	r2, [pc, #152]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f7c:	f023 0310 	bic.w	r3, r3, #16
 8002f80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <RCCEx_PLL2_Config+0x160>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	69d2      	ldr	r2, [r2, #28]
 8002f8e:	00d2      	lsls	r2, r2, #3
 8002f90:	4920      	ldr	r1, [pc, #128]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002f9c:	f043 0310 	orr.w	r3, r3, #16
 8002fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	4a19      	ldr	r2, [pc, #100]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002fae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002fb4:	e00f      	b.n	8002fd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d106      	bne.n	8002fca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002fc8:	e005      	b.n	8002fd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	4a11      	ldr	r2, [pc, #68]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002fd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002fdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe2:	f7fd fdbb 	bl	8000b5c <HAL_GetTick>
 8002fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002fe8:	e008      	b.n	8002ffc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002fea:	f7fd fdb7 	bl	8000b5c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e006      	b.n	800300a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <RCCEx_PLL2_Config+0x15c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	58024400 	.word	0x58024400
 8003018:	ffff0007 	.word	0xffff0007

0800301c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800302a:	4b53      	ldr	r3, [pc, #332]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b03      	cmp	r3, #3
 8003034:	d101      	bne.n	800303a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e099      	b.n	800316e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800303a:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a4e      	ldr	r2, [pc, #312]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003046:	f7fd fd89 	bl	8000b5c <HAL_GetTick>
 800304a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800304c:	e008      	b.n	8003060 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800304e:	f7fd fd85 	bl	8000b5c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e086      	b.n	800316e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003060:	4b45      	ldr	r3, [pc, #276]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	051b      	lsls	r3, r3, #20
 800307a:	493f      	ldr	r1, [pc, #252]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	628b      	str	r3, [r1, #40]	; 0x28
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	3b01      	subs	r3, #1
 8003086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	3b01      	subs	r3, #1
 8003090:	025b      	lsls	r3, r3, #9
 8003092:	b29b      	uxth	r3, r3
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	3b01      	subs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030b0:	4931      	ldr	r1, [pc, #196]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	492d      	ldr	r1, [pc, #180]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4928      	ldr	r1, [pc, #160]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	4a26      	ldr	r2, [pc, #152]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <RCCEx_PLL3_Config+0x160>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	69d2      	ldr	r2, [r2, #28]
 80030f2:	00d2      	lsls	r2, r2, #3
 80030f4:	4920      	ldr	r1, [pc, #128]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80030fa:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003112:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003116:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003118:	e00f      	b.n	800313a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d106      	bne.n	800312e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003120:	4b15      	ldr	r3, [pc, #84]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4a14      	ldr	r2, [pc, #80]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003126:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800312a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800312c:	e005      	b.n	800313a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	4a11      	ldr	r2, [pc, #68]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003138:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003146:	f7fd fd09 	bl	8000b5c <HAL_GetTick>
 800314a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800314c:	e008      	b.n	8003160 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800314e:	f7fd fd05 	bl	8000b5c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e006      	b.n	800316e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <RCCEx_PLL3_Config+0x15c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	58024400 	.word	0x58024400
 800317c:	ffff0007 	.word	0xffff0007

08003180 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e02b      	b.n	80031ec <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd f9fd 	bl	80005a8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f000 f877 	bl	80032b4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	461a      	mov	r2, r3
 80031d0:	6839      	ldr	r1, [r7, #0]
 80031d2:	f000 f8cb 	bl	800336c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <HAL_SDRAM_Init+0x74>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a06      	ldr	r2, [pc, #24]	; (80031f4 <HAL_SDRAM_Init+0x74>)
 80031dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031e0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	52004000 	.word	0x52004000

080031f8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800320a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d101      	bne.n	8003216 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
 8003214:	e021      	b.n	800325a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8003216:	7dfb      	ldrb	r3, [r7, #23]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d002      	beq.n	8003222 <HAL_SDRAM_SendCommand+0x2a>
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	2b05      	cmp	r3, #5
 8003220:	d118      	bne.n	8003254 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f904 	bl	8003440 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d104      	bne.n	800324a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2205      	movs	r2, #5
 8003244:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003248:	e006      	b.n	8003258 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003252:	e001      	b.n	8003258 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d101      	bne.n	800327c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
 800327a:	e016      	b.n	80032aa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d10f      	bne.n	80032a8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f8f6 	bl	8003488 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d121      	bne.n	800330a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <FMC_SDRAM_Init+0xb4>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	6851      	ldr	r1, [r2, #4]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	6892      	ldr	r2, [r2, #8]
 80032d6:	4311      	orrs	r1, r2
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	68d2      	ldr	r2, [r2, #12]
 80032dc:	4311      	orrs	r1, r2
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	6912      	ldr	r2, [r2, #16]
 80032e2:	4311      	orrs	r1, r2
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	6952      	ldr	r2, [r2, #20]
 80032e8:	4311      	orrs	r1, r2
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	6992      	ldr	r2, [r2, #24]
 80032ee:	4311      	orrs	r1, r2
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	69d2      	ldr	r2, [r2, #28]
 80032f4:	4311      	orrs	r1, r2
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	6a12      	ldr	r2, [r2, #32]
 80032fa:	4311      	orrs	r1, r2
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003300:	430a      	orrs	r2, r1
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e026      	b.n	8003358 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	69d9      	ldr	r1, [r3, #28]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4319      	orrs	r1, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	430b      	orrs	r3, r1
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <FMC_SDRAM_Init+0xb4>)
 800332e:	4013      	ands	r3, r2
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	6851      	ldr	r1, [r2, #4]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	6892      	ldr	r2, [r2, #8]
 8003338:	4311      	orrs	r1, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	68d2      	ldr	r2, [r2, #12]
 800333e:	4311      	orrs	r1, r2
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	6912      	ldr	r2, [r2, #16]
 8003344:	4311      	orrs	r1, r2
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	6952      	ldr	r2, [r2, #20]
 800334a:	4311      	orrs	r1, r2
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	6992      	ldr	r2, [r2, #24]
 8003350:	430a      	orrs	r2, r1
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	ffff8000 	.word	0xffff8000

0800336c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d128      	bne.n	80033d0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	1e59      	subs	r1, r3, #1
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	3b01      	subs	r3, #1
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	4319      	orrs	r1, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	3b01      	subs	r3, #1
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	4319      	orrs	r1, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	031b      	lsls	r3, r3, #12
 80033a8:	4319      	orrs	r1, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	4319      	orrs	r1, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	051b      	lsls	r3, r3, #20
 80033bc:	4319      	orrs	r1, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	430b      	orrs	r3, r1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	e02d      	b.n	800342c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <FMC_SDRAM_Timing_Init+0xd0>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	68d2      	ldr	r2, [r2, #12]
 80033dc:	3a01      	subs	r2, #1
 80033de:	0311      	lsls	r1, r2, #12
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	6952      	ldr	r2, [r2, #20]
 80033e4:	3a01      	subs	r2, #1
 80033e6:	0512      	lsls	r2, r2, #20
 80033e8:	430a      	orrs	r2, r1
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1e59      	subs	r1, r3, #1
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	4319      	orrs	r1, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	3b01      	subs	r3, #1
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	4319      	orrs	r1, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	4319      	orrs	r1, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	3b01      	subs	r3, #1
 8003422:	061b      	lsls	r3, r3, #24
 8003424:	430b      	orrs	r3, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	ff0f0fff 	.word	0xff0f0fff

08003440 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <FMC_SDRAM_SendCommand+0x44>)
 8003452:	4013      	ands	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	6811      	ldr	r1, [r2, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	6852      	ldr	r2, [r2, #4]
 800345c:	4311      	orrs	r1, r2
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	6892      	ldr	r2, [r2, #8]
 8003462:	3a01      	subs	r2, #1
 8003464:	0152      	lsls	r2, r2, #5
 8003466:	4311      	orrs	r1, r2
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	68d2      	ldr	r2, [r2, #12]
 800346c:	0252      	lsls	r2, r2, #9
 800346e:	430a      	orrs	r2, r1
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	ffc00000 	.word	0xffc00000

08003488 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8003498:	4013      	ands	r3, r2
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	0052      	lsls	r2, r2, #1
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	ffffc001 	.word	0xffffc001

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	4d0d      	ldr	r5, [pc, #52]	; (80034f0 <__libc_init_array+0x38>)
 80034bc:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034be:	1b64      	subs	r4, r4, r5
 80034c0:	10a4      	asrs	r4, r4, #2
 80034c2:	2600      	movs	r6, #0
 80034c4:	42a6      	cmp	r6, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	4d0b      	ldr	r5, [pc, #44]	; (80034f8 <__libc_init_array+0x40>)
 80034ca:	4c0c      	ldr	r4, [pc, #48]	; (80034fc <__libc_init_array+0x44>)
 80034cc:	f000 f820 	bl	8003510 <_init>
 80034d0:	1b64      	subs	r4, r4, r5
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	2600      	movs	r6, #0
 80034d6:	42a6      	cmp	r6, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e0:	4798      	blx	r3
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ea:	4798      	blx	r3
 80034ec:	3601      	adds	r6, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	08003548 	.word	0x08003548
 80034f4:	08003548 	.word	0x08003548
 80034f8:	08003548 	.word	0x08003548
 80034fc:	0800354c 	.word	0x0800354c

08003500 <memset>:
 8003500:	4402      	add	r2, r0
 8003502:	4603      	mov	r3, r0
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <memset+0xa>
 8003508:	4770      	bx	lr
 800350a:	f803 1b01 	strb.w	r1, [r3], #1
 800350e:	e7f9      	b.n	8003504 <memset+0x4>

08003510 <_init>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	bf00      	nop
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr

0800351c <_fini>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr
